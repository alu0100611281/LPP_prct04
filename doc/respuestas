-¿Que es rvm (Ruby Version Manager )? Nos permite instalar y administrar distintas instancias de Ruby.
31. ¿Cual es el resultado de la siguiente operacion?
Nill

34. ¿Cuales son las diferencias entre la ejecución del programa "Hola Mundo" con el interprete de Ruby (ruby helloWorld.rb) y el interprete interactivo del ejercicio anterior? Escriba la respuesta en fichero creado en el ejercicio 11.

	
helloworld.rb(main):001:0> #! /usr/bin/ruby
helloworld.rb(main):002:0* 
helloworld.rb(main):003:0* puts "Hola Mundo"helloworld.rb(main):003:0* 
helloworld.rb(main):003:0> 
Hola Mundo
=> nil

40.¿Cual es el resultado de cada una de las siguientes operaciones?

[1] pry(main)> puts x
10
=> nil
[2] pry(main)> def hello
[2] pry(main)*
puts "Hello world"
[2] pry(main)* end
=> nil
2[3] pry(main)> hello
nil
=> ???
[4] pry(main)> byebye
bye bye world!!!
=> nil
[5] pry(main)> x = "changed"
=> "changed"
[6] pry(main)> exit
program resumes here. Value of x is: "changed"


41.¿Cuales son las diferencias entre la ejecucion del programa "Hola Mundo" con el interprete interactivo y con pry? Escriba la respuesta en fichero creado en el ejercicio 11.

	La diferencia es que el interprete te lo ejecuta de golpe , y el pry te va ejecutando paso a paso y te permite hacer modificaciones.


48. ¿Qué diferencia hay entre "\t\n" y ’\t\n’? 
	
	Comilla doble → => "\t\n" 
	Comilla simple → "\\t\\n" 


49. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}? 
	Agrega comillas simples a la notación. (se supone a mi me salen dobles con 	%q y %Q.)
	"hello wordl\\n" y “ 'a' 'b' 'c' “ 


50. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}? 
	Se supone que este añade comillas dobles pero me funciona exactamente igual que el anterior. 


51. ¿Qué queda en c? 

irb(main):001:0> a = 4 
=> 4 
irb(main):002:0> b =2 
=> 2 
irb(main):003:0> c = <<HERE 
irb(main):004:0" --#{a}- 
irb(main):005:0" 
--#{b}-irb(main):006:0" 
HERE 
Queda "--4--\n--2--\n" 

52. ¿Qué queda en c? 

irb(main):001:0> a = 4 
=> 4 
irb(main):002:0> b =2 
=> 2 
irb(main):008:0> c = <<’HERE’ 
irb(main):009:0’ --#{a}- 
irb(main):010:0’--#{b}- 
irb(main):011:0’ 
HERE 
Queda "--\#{a}--\n--\#{b}--\n" 

53. s = "hello". ¿Cual es el valor de las siguientes expresiones? 

S[0,2] → “he” 
s[-1,1] → “o” 
s[0,10] → “hello” 

54. ¿Qué queda en g? 

>> g = "hello" 
=> "hello" 
>> g << " world" 
Queda helloword. 

55. ¿Qué queda en e? 

>> e = ’.’*3 
Queda en e= ... 

56. ¿Cual es el resultado? 

>> a = 1 
=> 1 
>> "#{a=a+1} "*3 
Me da error. 

57. ¿Qué es esto? %w[this is a test] 

Pone entre doble comilla las palabras del array. ["this", "is", "a", "test"] 

58. ¿Qué es esto? %w[\t \n] 

Lo mismo pone entre comillas lo que está dentro del array. [“\t” “ \n”] 

59. ¿Qué es esto? %W[\t \n] 

Hace lo mismo que el anterior. 


60. ¿Qué contiene nils? nils = Array.new(3) 

Son la cadena vacia. [nil, nil, nil] 

61. ¿Qué contiene zeros? zeros = Array.new(3, 0) 

[0, 0, 0] 

62. ¿Qué queda en b? 

>> x = [[1,2],[3,4]] 
=> [[1, 2], [3, 4]] 
>> b = Array.new(x) 
Queda [[1, 2], [3, 4]] . 

63. ¿Qué queda en c? 

>> c = Array.new(3) { |i| 2*i } 
Queda [0,2,4]. 

64. ¿Cual es el resultado de cada una de estas operaciones? 

>> a = (’a’..’e’).to_a 
=> ["a", "b", "c", "d", "e"] 
>> a[1,1] 
=> [“b”] 
>> a[-2,2] 
=>[“d”,”e”] 
>> a[0..2] 
=>[“a”, “b”, “c”] 
>> a[0...1] 
=>[“a”] 
>> a[-2..-1] 
=>[“d”,”e”] 

65. ¿Cual es el resultado de cada una de estas operaciones? 

>> a 
=> ["a", "b", "c", "d", "e"] 
>> a[0,2] = %w{A B} 
=> ["A", "B"] 
>> a 
=>[“A”, “B” ,”c”,”d”,”e”] 
>> a[2..5] = %w{C D E} 
=> ["C", "D", "E"] 
>> a 
=>[“A”,”B”,”C”,”D”,”E”] 
>> a[0,0] = [1,2,3] 
=> [1, 2, 3] 
>> a 
=>[1, 2, 3, "A", "B", "C", "D", "E"] 
>> a[0,2] = [] 
=> [] 
>> a 
=>[3, "A", "B", "C", "D", "E"] 
>> a[-1,1] = [ ’Z’ ] 
=> ["Z"] 
>> a 
=>[3, "A", "B", "C", "D", "Z"] 
>> a[-2,2] = nil 
=> nil 
>> a 
=>[3, "A", "B", "C"] 

66. ¿Cual es el resultado de cada una de estas operaciones? 

>> a = (1...4).to_a 
=>[1,2,3] 
>> a = a + [4, 5] 
=>[1, 2, 3, 4, 5] 
>> a += [[6, 7, 8]] 
=>[1, 2, 3, 4, 5, [6, 7, 8]] 
>> a = a + 9 

67. ¿Cuál es el resultado de cada una de estas operaciones? 

>> x = %w{a b c b a} 
=>[“a”,”b”,”c”,”b”,”a”] 
>> x = x - %w{b c d} 
=>[“a” ,”a”] 

68. ¿Cuál es el resultado de cada una de estas operaciones? 

>> z = [0]*8 
=>[0, 0, 0, 0, 0, 0, 0, 0] 

69. ¿Cuál es el resultado de cada una de estas operaciones? 

>> a = [] 
=> [] 
>> a << 1 
=>[1] 
>> a << 2 << 3 
=>[1,2,3] 
>> a << [4, 5, 6] 
=>[1,2,3,[4,5,6]] 
>> a.concat [7, 8] 
=>[1,2,3,[4,5,6],7,8] 

70. ¿Cuál es el resultado de cada una de estas operaciones? 

>> a = [1, 1, 2, 2, 3, 3, 4] 
=> [1, 1, 2, 2, 3, 3, 4] 
>> b = [5, 5, 4, 4, 3, 3, 2] 
=> [5, 5, 4, 4, 3, 3, 2] 
>> c = a | b 
=>[1,2,3,4,5] 
>> d = b | a 
=>[5,4,3,2,1] 
>> e = a & b 
=>[3,4] 
>> f = b & a 
=>[4,3] 

71. ¿Qué resultados dan las siguientes operaciones? 

>> a = 1..10 
=> 1..10 
>> a.class 
=> Range 
>> a.to_a 
=>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
>> b = 1...10 
=> 1....10 
>> b.to_a 
=>[5, 5, 4, 4, 3, 3, 4] 
>> b.include? 10 
=>false 
>> b.include? 8 
=>false 
>> b.step(2) {|x| print "#{x} " } → ¡¡me da error!! 
>> 1..3.to_a 

72. ¿Qué resultados dan las siguientes operaciones? 

>> r = 0...100 
=> 0....100 
>> r.member? 50 
=>true 
>> r.include? 99.9 
=>true 
>> r.member? 99.9 
=>true 

73. ¿Qué resultados dan las siguientes operaciones? 

>> true.class 
=>TrueClass 
>> false.class 
=>FalseClass 
>> puts "hello" if 0 
hello 
=> nil 
>> puts "hello" if nil 
nil 
>> puts "hello" if "" 
>>hello 
nil 

74. ¿Qué resultados dan las siguientes operaciones? 

>> x = :sym 
=> :sym 
>> x.class 
=>Symbol 
>> x == ’sym’ 
=>false 
>> x == :sym 
=>true 
>> z = :’a long symbol’ 
=> :"a long symbol" 
>> z.class 
=>Symbol 
>> x == ’sym’.to_sym 
=>true 
>> x.to_s == ’sym’ 
=>false 

75. ¿Qué resultados se dan? 

>> s = "Ruby" 
=> "Ruby" 
>> t = s 
=> "Ruby" 
>> t[-1] = "" 
=> "" 
>> print s “Rub” => nil 
>> t = "Java" 
=> "Java" 
>> print s, t RubJava=> nil 


76. ¿Cuál es el resultado? 

>> "%d %s" % [3, "rubies"] 
=>"3 rubies" 

77. ¿Cuáles son los resultados? 

>> x, y = 4, 5 
=>[4, 5] 
>> z = x > y ? x : y 
=>5 
>> x,y,z = [1,2,3] 
=>[1, 2, 3] 

78. ¿Quéresultados dan las siguientes operaciones? 

>> x = { :a => 1, :b => 2 } 
=> {:b=>2, :a=>1} 
>> x.keys 
=>[:b, :a] 
>> x.values 
=>[2, 1] 
>> x[:c] = 3 
=> 3 
>> x 
=>{:b=>2, :c=>3, :a=>1} 
>> x.delete(’a’) 
=> nil 
>> x 
=> 
>> x.delete(:a) 
=> 1 
>> x 
=>{:b=>2, :c=>3} 
>> x = { :a => 1, :b => 2, :c => 4 } 
=> {:b=>2, :c=>4, :a=>1} 
>> x.delete_if { |k,v| v % 2 == 0 } 
>> x 
=>{:a=>1} 



 79.¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Quédiferencia hay 
con la asignación counts = {}? 
Hace esto {}.Que uno es un hash y el otro es una valor asignado a la variables 
counts. 

80.¿Qué retorna esta expresién? ’hello world, hello LPP’.scan /\w+/ 
Retorna: ["hello", "world", "hello", "LPP"] . 
